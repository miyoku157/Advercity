//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34209
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Synapse.Runtime;
namespace AssemblyCSharp
{
    public class Enemy : Being
    {
        private Brain synapseBrain;
        int motivation = 70;
        protected override void Start()
        {
            base.Start();
            StartCoroutine("StartAI");
        }
        IEnumerator StartAI()
        {
            synapseBrain = new SynapseLibrary_IA.Ennemy.Perception(this);
            while (Application.isPlaying && synapseBrain != null)
            {
                AIUpdate();
                yield return new WaitForSeconds(1);
            }
        }
        private void AIUpdate()
        {
            if (synapseBrain.Process() == false)
            {
            }
        }
        protected override void Update()
        {
            base.Update();
        }
        protected override void GetSensorPositionData(out Vector3 a_position)
        {
            base.GetSensorPositionData(out a_position);
        }
        protected void GetSensorPerceptionData(out int percept)
        {
            percept = base.perception;
        }
        protected void GetSensorMotivationData(out int motiv)
        {
            motiv = motivation;
        }
        void OnDestroy()
        {
        }
        protected object[] GetLayerOpponentData()
        {
            return GameController.Units[0].ToArray();
        }
        protected void DesireInsightCallback(object opponent)
        {
            Being target = opponent as Being;
            float dist = Vector3.Distance(this.transform.position, target.transform.position);
            if (dist < target.scope)
            {
                base.launchAttack(target.gameObject);
            }
            else {
                base.move(target.transform.position);
            }
        }
    }
}

